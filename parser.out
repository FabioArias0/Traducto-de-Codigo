Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    PRINT

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statement
Rule 2     statements -> statements statement
Rule 3     statement -> ID EQUALS expression NEWLINE
Rule 4     statement -> ID LPAREN expression RPAREN NEWLINE
Rule 5     expression -> expression PLUS term
Rule 6     expression -> term
Rule 7     term -> NUMBER
Rule 8     term -> ID
Rule 9     empty -> <empty>

Terminals, with rules where they appear

EQUALS               : 3
ID                   : 3 4 8
LPAREN               : 4
NEWLINE              : 3 4
NUMBER               : 7
PLUS                 : 5
PRINT                : 
RPAREN               : 4
error                : 

Nonterminals, with rules where they appear

empty                : 
expression           : 3 4 5
statement            : 1 2
statements           : 2 0
term                 : 5 6

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . ID EQUALS expression NEWLINE
    (4) statement -> . ID LPAREN expression RPAREN NEWLINE

    ID              shift and go to state 3

    statements                     shift and go to state 1
    statement                      shift and go to state 2

state 1

    (0) S' -> statements .
    (2) statements -> statements . statement
    (3) statement -> . ID EQUALS expression NEWLINE
    (4) statement -> . ID LPAREN expression RPAREN NEWLINE

    ID              shift and go to state 3

    statement                      shift and go to state 4

state 2

    (1) statements -> statement .

    ID              reduce using rule 1 (statements -> statement .)
    $end            reduce using rule 1 (statements -> statement .)


state 3

    (3) statement -> ID . EQUALS expression NEWLINE
    (4) statement -> ID . LPAREN expression RPAREN NEWLINE

    EQUALS          shift and go to state 5
    LPAREN          shift and go to state 6


state 4

    (2) statements -> statements statement .

    ID              reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)


state 5

    (3) statement -> ID EQUALS . expression NEWLINE
    (5) expression -> . expression PLUS term
    (6) expression -> . term
    (7) term -> . NUMBER
    (8) term -> . ID

    NUMBER          shift and go to state 10
    ID              shift and go to state 7

    expression                     shift and go to state 8
    term                           shift and go to state 9

state 6

    (4) statement -> ID LPAREN . expression RPAREN NEWLINE
    (5) expression -> . expression PLUS term
    (6) expression -> . term
    (7) term -> . NUMBER
    (8) term -> . ID

    NUMBER          shift and go to state 10
    ID              shift and go to state 7

    expression                     shift and go to state 11
    term                           shift and go to state 9

state 7

    (8) term -> ID .

    NEWLINE         reduce using rule 8 (term -> ID .)
    PLUS            reduce using rule 8 (term -> ID .)
    RPAREN          reduce using rule 8 (term -> ID .)


state 8

    (3) statement -> ID EQUALS expression . NEWLINE
    (5) expression -> expression . PLUS term

    NEWLINE         shift and go to state 12
    PLUS            shift and go to state 13


state 9

    (6) expression -> term .

    NEWLINE         reduce using rule 6 (expression -> term .)
    PLUS            reduce using rule 6 (expression -> term .)
    RPAREN          reduce using rule 6 (expression -> term .)


state 10

    (7) term -> NUMBER .

    NEWLINE         reduce using rule 7 (term -> NUMBER .)
    PLUS            reduce using rule 7 (term -> NUMBER .)
    RPAREN          reduce using rule 7 (term -> NUMBER .)


state 11

    (4) statement -> ID LPAREN expression . RPAREN NEWLINE
    (5) expression -> expression . PLUS term

    RPAREN          shift and go to state 14
    PLUS            shift and go to state 13


state 12

    (3) statement -> ID EQUALS expression NEWLINE .

    ID              reduce using rule 3 (statement -> ID EQUALS expression NEWLINE .)
    $end            reduce using rule 3 (statement -> ID EQUALS expression NEWLINE .)


state 13

    (5) expression -> expression PLUS . term
    (7) term -> . NUMBER
    (8) term -> . ID

    NUMBER          shift and go to state 10
    ID              shift and go to state 7

    term                           shift and go to state 15

state 14

    (4) statement -> ID LPAREN expression RPAREN . NEWLINE

    NEWLINE         shift and go to state 16


state 15

    (5) expression -> expression PLUS term .

    NEWLINE         reduce using rule 5 (expression -> expression PLUS term .)
    PLUS            reduce using rule 5 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 5 (expression -> expression PLUS term .)


state 16

    (4) statement -> ID LPAREN expression RPAREN NEWLINE .

    ID              reduce using rule 4 (statement -> ID LPAREN expression RPAREN NEWLINE .)
    $end            reduce using rule 4 (statement -> ID LPAREN expression RPAREN NEWLINE .)

